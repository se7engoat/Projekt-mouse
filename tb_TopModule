`timescale 1ns / 1ps


module TopModule_tb;

    //inputs
    reg CLK;
    reg RESET;
    
    
    //outputs
    wire [3:0] SEG_SELECT;
    wire [7:0] LED;
    wire [15:0] LED_LIGHTS;
    wire CLK_MOUSE;
    wire DATA_MOUSE;
    wire [7:0] BUS_DATA;
    wire [7:0] BUS_ADDR;
    wire BUS_WE;
    wire [1:0] BUS_INTERRUPTS_ACK;
    wire [1:0] BUS_INTERRUPTS_RAISE;
    wire [7:0] ROM_ADDRESS;
    wire [7:0] ROM_DATA;
    
    // Instantiate the TopModule (DUT)
    TopModule DUT (
        .CLK(CLK),
        .RESET(RESET),
        .CLK_MOUSE(CLK_MOUSE),
        .DATA_MOUSE(DATA_MOUSE),
        .SEG_SELECT(SEG_SELECT),
        .LED(LED),
        .LED_LIGHTS(LED_LIGHTS)
    );
    
    // Clock generation (period: 10ns, frequency: 100MHz)
    always begin
        #5 CLK = ~CLK;  // Toggle every 5ns, so 10ns period
    end
    
    // Initial block for testbench initialization
    initial begin
        // Initialize the signals
        CLK = 0;
        RESET = 0;
        // Initialize the mouse signals to zero (you can modify this as per your needs)
        CLK_MOUSE = 0;
        DATA_MOUSE = 0;
        
        // Apply reset
        RESET = 1;
        #20;  // Keep the reset active for 20ns
        RESET = 0;
        
        // Apply some test cases
        #10; // Wait for 10ns after reset
        
        // Test case 1: Write BUS_DATA = 0x49 when BUS_WE = 1
        // Set the write enable (BUS_WE) and write data (BUS_DATA)
        BUS_ADDR = 8'h10;  // Arbitrary address (can be modified)
        BUS_DATA = 8'h49;  // Set the data to 0x49
        BUS_WE = 1;        // Set write enable to 1
        #10;               // Wait for a small amount of time
        // Check if BUS_WE = 1 and BUS_DATA = 0x49
        if (BUS_WE == 1) begin
            if (BUS_DATA == 8'h49) begin
                $display("Test case 1 passed: BUS_WE = 1 and BUS_DATA = 0x49");
            end else begin
                $display("Test case 1 failed: Expected BUS_DATA = 0x49, got %h", BUS_DATA);
            end
        end else begin
            $display("Test case 1 failed: Expected BUS_WE = 1, got %b", BUS_WE);
        end
        BUS_WE = 0;  // Reset the write enable

        // Example test case: simulate mouse input signal change
        DATA_MOUSE = 1;
        #10;  // Wait for some time
        DATA_MOUSE = 0;
        
        // Example test case: simulate LED output change based on the bus
        // Set bus data, address, and write enable signal
        // Assuming the processor logic writes to the LEDs on specific address
        // Assuming LED address is 0x10 for simplicity in the test case
        BUS_ADDR = 8'h10;
        BUS_DATA = 8'hAA;  // Arbitrary data value to write
        BUS_WE = 1;        // Write enable
        #10;
        BUS_WE = 0;        // Disable write
        
        // Example: Assert interrupt raise signal for testing interrupt behavior
        BUS_INTERRUPTS_RAISE = 2'b01; // Raise interrupt for testing
        #10;
        BUS_INTERRUPTS_RAISE = 2'b00; // Clear interrupt
        
        // Check different scenarios based on your memory, timer, or other module interactions
        // Add more test cases as per your system's behavior
        
        // End of simulation after a certain period
        #100;
        $finish;
    end
    
    // Optional: Monitor signals and display them during simulation
    initial begin
        $monitor("At time %t, SEG_SELECT = %b, LED = %b, LED_LIGHTS = %h, BUS_DATA = %h, BUS_ADDR = %h", 
                 $time, SEG_SELECT, LED, LED_LIGHTS, BUS_DATA, BUS_ADDR);
    end

endmodule
