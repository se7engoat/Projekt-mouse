// MOUSE INIT
@0x5C   0x00 // Read mouse status byte from memory to A
@0x5D   0xA0
@0x5E   0x02 // Store mouse status byte to LED memory
@0x5F   0xC0
@0x60   0x00 // Read prev mouse X position
@0x61   0x14
@0x62   0x01 // Read prev mouse Y position
@0x63   0x15
@0x64   0x02 // Write prev mouse X to VGA
@0x65   0xB0
@0x66   0x03 // Write prev mouse Y to VGA
@0x67   0xB1
@0x68   0x00 // Load previous pixel value to reg A
@0x69   0x16
@0x6A   0x02 // Write prev pixel value from reg A to VGA memory high address
@0x6B   0xB2
@0x6C   0x00 // Read Mouse X byte from memory to A
@0x6D   0xA1
@0x6E   0x01 // Read Mouse Y byte from memory to B
@0x6F   0xA2
@0x70   0x02 // Save mouse X to RAM
@0x71   0x14
@0x72   0x03 // Save mouse Y to RAM
@0x73   0x15
@0x74   0x02 // Write Mouse X byte to 7-seg memory base address
@0x75   0xD0
@0x76   0x03 // Write Mouse Y byte to 7-seg memory high address
@0x77   0xD1
@0x78   0x02 // Write Mouse X byte to VGA memory base address
@0x79   0xB0
@0x7A   0x03 // Write Mouse Y byte to VGA memory middle address
@0x7B   0xB1
@0x7C   0x00 // Load previous pixel value
@0x7D   0xB2
@0x7E   0x02 // Save previous pixel value to RAM
@0x7F   0x16
@0x80   0x00 // Load a 1 to reg A
@0x81   0x05
@0x82   0x02 // Write a 1 from reg A to VGA memory high address
@0x83   0xB2
@0x84   0x08 // Go to IDLE and wait for interrupts


// DETERMINE WHICH GRID SQUARE
@0x85   0x00 // Load mouse X to reg A
@0x86   0xA1
@0x87   0x01 // Load 53 to reg B
@0x88   0x10
@0x89   0xB6 // If X is less than 53, branch
@0x8A   0x91
@0x8B   0x01 // Load 107 to reg B
@0x8C   0x11
@0x8D   0xB6 // If X is less than 107, branch
@0x8E   0x9D
@0x8F   0x07 // Jump to handling X in the right part of the screen
@0x90   0xA9

// X less than 53
@0x91   0x00 // Load mouse Y to reg A
@0x92   0xA2
@0x93   0x01 // Load 40 to reg B
@0x94   0x12
@0x95   0xB6 // If Y is less than 40, branch to bottom left
@0x96   0xB5
@0x97   0x01 // Load 80 to reg B
@0x98   0x13
@0x99   0xB6 // If Y is less than 80, branch to middle left
@0x9A   0xCD
@0x9B   0x07 // Jump to top left
@0x9C   0xC1

// X between 53 and 107
@0x9D   0x00 // Load mouse Y to reg A
@0x9E   0xA2
@0x9F   0x01 // Load 40 to reg B
@0xA0   0x12
@0xA1   0xB6 // If Y is less than 40, branch to bottom middle
@0xA2   0xBD
@0xA3   0x01 // Load 80 to reg B
@0xA4   0x13
@0xA5   0xB6 // If Y is less than 80, branch to middle middle
@0xA6   0xD5
@0xA7   0x07 // Jump to top middle
@0xA8   0xC9

// X over 107
@0xA9   0x00 // Load mouse Y to reg A
@0xAA   0xA2
@0xAB   0x01 // Load 40 to reg B
@0xAC   0x12
@0xAD   0xB6 // If Y is less than 40, branch to bottom right
@0xAE   0xB9
@0xAF   0x01 // Load 80 to reg B
@0xB0   0x13
@0xB1   0xB6 // If Y is less than 80, branch to middle right
@0xB2   0xD1
@0xB3   0x07 // Jump to top right
@0xB4   0xC5
